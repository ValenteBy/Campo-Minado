package campominado.modelo;

import java.util.ArrayList;
import java.util.List;
import java.util.function.Predicate;

public class Tabuleiro {

	private int linhas;
	private int colunas;
	private int minas;
	
	private final List<Campo> campos = new ArrayList<>();
	
	
	
	public Tabuleiro(int linhas, int colunas, int minas) {
		this.linhas  = linhas;
		this.colunas = colunas;
		this.minas   = minas;
		
		gerarCampos();
		associarOsVizinhos();
		sortearMinas();
	}


	
	
	
	//Metodos do construtor

	private void sortearMinas() {
		long minasArmadas = 0;
		Predicate<Campo> minado = c -> c.isMinado();
		
		do {
			minasArmadas = campos.stream().filter(minado).count();
			int aleatorio = (int) (Math.random() * campos.size());
			campos.get(aleatorio).minar();
		} while(minasArmadas < minas);
	}
	
	public boolean objetivoAlcancado() {
		return campos.stream().allMatch(c -> c.objetivoAlcancado());
	}
	
	public void reniciar() {
		campos.stream().forEach(c -> c.reinicar());
		sortearMinas();
	}
	
	public String toString() {
		StringBuilder sb = new StringBuilder();
		
		int c = 0;
		for(int i = 0; i < linhas; i++) {
			for(int j = 0; j < colunas; i++) {
				sb.append(" ");
				sb.append(campos.get(i));
				sb.append(" ");
				c++;
			}
			sb.append("\n");
		}
		return sb.toString();
	}



	private void associarOsVizinhos() {
		for(Campo c1: campos) {
			for(Campo c2: campos) {
				c1.adicionarVizinho(c2);
			}
		}
		
	}



	private void gerarCampos(){
		for(int i = 0; i < linhas; i++) {
			for(int j = 0; j < colunas; j++) {
				campos.add(new Campo(i, j));
			}
		}
	}
}
